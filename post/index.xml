<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on xn213</title>
    <link>https://xn213.github.io/hugo-blog/post/</link>
    <description>Recent content in Posts on xn213</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 03 Aug 2019 21:13:10 +0800</lastBuildDate>
    
	<atom:link href="https://xn213.github.io/hugo-blog/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>前端工程化</title>
      <link>https://xn213.github.io/hugo-blog/2019/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</link>
      <pubDate>Sat, 03 Aug 2019 21:13:10 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/08/%E5%89%8D%E7%AB%AF%E5%B7%A5%E7%A8%8B%E5%8C%96/</guid>
      <description>前端工程化主要应该从模块化、组件化、规范化、自动化四个方面来思考
很多小伙伴会狭隘的认为工程化就是webpack或者gulp打包而已,
应该涵盖从项目创建、开发、编译、打包、测试、发布、监控全流程。
项目初始化 项目脚手架目前已经非常普遍，例如create-react-app或者vue-cli都是官方标准的脚手架工具。对于一些稍大的公司都建议自己包装一套自己的脚手架，这样可以沉淀很多最佳实践，例如工程目录结构、lint配置、监控配置、打点配置等等，因此脚手架是落地前端架构标准化不可或缺的一环。
本地开发 lint 的规范一定要在项目初期就落地，可以直接拿airbnb的规范或者再定制化一下。lint可以极大的提升代码质量，至少从代码风格来看可以保证统一。 Sonar 的引入可以进一步提升代码质量，帮助分析出潜在的问题，同时分析代码的重复率，过长的高数等等，这些都是所谓的代码bad smell，如果任其发展下去，项目维护成本会直线上升。 Mock工具的必要性在前后端联调时就能充分提现，很多时候由于前后端接口定义不清晰导致联调过程就是一个扯皮过程，如果缺乏mock工具，前端也会沦为后端接口调试的触发器，前端页面点一下，后端调试大半天，前端小伙伴们伤不起啊。Mock工具至少要有接口定义和本地mock的能力，能够极大提升大家研发体验。
打包 前端工程打包工具强烈推荐 webpack 4，强大的插件能力能够让你做几乎任何事情。webpack4中引入了更为强大智能的code split能力，能够极大缩减包大小，经过实践通常减小幅度都在30%-50%，而且在打包速度上也有很大改进，通常也有30%的提升。</description>
    </item>
    
    <item>
      <title>Fe Sources</title>
      <link>https://xn213.github.io/hugo-blog/2019/07/fe-sources/</link>
      <pubDate>Mon, 29 Jul 2019 21:13:10 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/07/fe-sources/</guid>
      <description>前端技术日新月异，随着 大前端 的趋势，想要成为一名合格的前端工程师，需要学习掌握的东西更是宽泛。所以我们在寻求进阶的过程中，既要不断夯实前端基础，也要快速响应技术的更新迭代。闲话少说，这次给大家整理分享一些前端进阶的优质学习资源，希望对大家有所帮助！
前端进阶必备，github 优质资源整理分享！ github 优质项目 frontend-tech-list  前端技术清单，不论你是正在自学前端，还是对前端某些技术熟练掌握但某些还未涉足，我都希望这份清单能帮助你 review 一些前端的基础能力。
  github  前端技术清单
 0. 年度报告 1. 基础拾遗
 1.1. JavaScript 1.2. CSS 1.3. 浏览器  2. 工程化与工具
 2.1. webpack 2.2. Gulp 2.3. Linter 2.4. 静态类型（Typescript/Flow） 2.5. Babel 2.6. CSS预处理与模块化  3. 性能优化
 3.1. 加载性能 3.2. 运行时性能 3.3. 前端缓存 3.4. 性能调试与实践 3.5. 性能指标  4. 安全
 4.1. XSS 4.2. CSRF 4.3. CSP 4.</description>
    </item>
    
    <item>
      <title>编码规范</title>
      <link>https://xn213.github.io/hugo-blog/2019/07/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</link>
      <pubDate>Tue, 23 Jul 2019 19:21:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/07/%E7%BC%96%E7%A0%81%E8%A7%84%E8%8C%83/</guid>
      <description> CodeStyle, 代码风格
风格  使用 arrow 函数代替匿名函数表达式。 只要需要的时候才把 arrow 函数的参数括起来。 比如，(x) =&amp;gt; x + x 是错误的，下面是正确的做法： i. x =&amp;gt; x + x ii. (x,y) =&amp;gt; x + y iii. &amp;lt;T&amp;gt;(x: T, y: T) =&amp;gt; x === y 总是使用 {} 把循环体和条件语句括起来。 开始的 { 总是在同一行。 小括号里开始不要有空白. 逗号，冒号，分号后要有一个空格。比如： i. for (var i = 0, n = str.length; i &amp;lt; 10; i++) { } ii. if (x &amp;lt; 10) { } iii. function f(x: number, y: string): void { } 每个变量声明语句只声明一个变量 （比如 使用 var x = 1; var y = 2; 而不是 var x = 1, y = 2;）。 else 要在结束的 } 后另起一行。  </description>
    </item>
    
    <item>
      <title>社会求助: 张天媛患白血病寻找亲生父母</title>
      <link>https://xn213.github.io/hugo-blog/2019/07/%E7%A4%BE%E4%BC%9A%E6%B1%82%E5%8A%A9-%E5%BC%A0%E5%A4%A9%E5%AA%9B%E6%82%A3%E7%99%BD%E8%A1%80%E7%97%85%E5%AF%BB%E6%89%BE%E4%BA%B2%E7%94%9F%E7%88%B6%E6%AF%8D/</link>
      <pubDate>Mon, 22 Jul 2019 08:37:10 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/07/%E7%A4%BE%E4%BC%9A%E6%B1%82%E5%8A%A9-%E5%BC%A0%E5%A4%A9%E5%AA%9B%E6%82%A3%E7%99%BD%E8%A1%80%E7%97%85%E5%AF%BB%E6%89%BE%E4%BA%B2%E7%94%9F%E7%88%B6%E6%AF%8D/</guid>
      <description>张天媛患白血病寻找亲生父母</description>
    </item>
    
    <item>
      <title>Hugo Create Blog</title>
      <link>https://xn213.github.io/hugo-blog/2019/07/hugo-create-blog/</link>
      <pubDate>Sat, 20 Jul 2019 17:23:20 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/07/hugo-create-blog/</guid>
      <description>hugo 基于 go 语言, 相对于 hexo 步骤简单, 不易出错; hexo 需要安装很多依赖
使用 hugo 创建博客 一. 安装 hugo  OS : brew install hugo win : 下载 Hugo https://github.com/gohugoio/hugo/releases 下载 32&amp;frasl;64 位   查看版本命令 hugo version window 需配置环境变量;(在安装路径下 打开命令行 输入也可以查看版本)
 配置环境变量: 系统&amp;gt;高级系统设置&amp;gt;环境变量&amp;gt;系统变量&amp;gt;新建:变量名随意不冲突就行如 HUGO,变量值为 hugo.exe 所在的路径文件夹(不需写hugo.exe)确定,然后找到用户变量 PATH 编辑, 在变量值最后加上;%刚才写的变量名%,如: ;%HUGO% , 注意前后分号;
  二. 创建  命令: hugo new site &amp;lt;项目名&amp;gt; 快到你不敢相信 秒建  三. 主题  hugo 主题库 https://themes.</description>
    </item>
    
    <item>
      <title>Hexo Create Blog</title>
      <link>https://xn213.github.io/hugo-blog/2019/07/hexo-create-blog/</link>
      <pubDate>Sat, 20 Jul 2019 17:05:46 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/07/hexo-create-blog/</guid>
      <description>基于 hexo + markdown 搭建个人博客. 容易上手搭建, 生态相对完善成熟, 问题解决方案全面
这里介绍 / 安装 / 搭建 / 修改主题 / 部署到github
使用 hexo 创建博客 1. 安装 nodejs / hexo # 淘宝镜像源 npm install -g --registry=https://registry.npm.taobao.org # 安装 hexo cnpm i hexo-cli -g # 验证 hexo hexo -v ## hexo: 3.9.0 ## hexo-cli: 2.0.0 ## node: 10.16.0  2. hexo命令创建项目  创建项目文件夹 cd 进入执行如下命令:
# 初始化项目 hexo init # 默认克隆一个landscape 主题: themes/landscape; # 默认创建一篇文章: source/_posts/hello-world.</description>
    </item>
    
    <item>
      <title>【Vue.js】21个值得一用的组件库</title>
      <link>https://xn213.github.io/hugo-blog/2019/05/vue.js21%E4%B8%AA%E5%80%BC%E5%BE%97%E4%B8%80%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93/</link>
      <pubDate>Tue, 21 May 2019 18:21:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/05/vue.js21%E4%B8%AA%E5%80%BC%E5%BE%97%E4%B8%80%E7%94%A8%E7%9A%84%E7%BB%84%E4%BB%B6%E5%BA%93/</guid>
      <description>【Vue.js】21个值得一用的组件库 Nuxt.js Vue的服务器端渲染框架，解决客户端渲染的诸多问题。（首页载入慢，SEO等）
https://nuxtjs.org/
Vuetify vue的UI/UX框架，除Bootstrap外的选择。
https://vuetifyjs.com/
eslint-plugin-vue vue的文法校验工具，可以快速找出代码、指令、样式单中的问题，同时还可以集成到VSCode, Sublime, Atom等IDE中。
https://eslint.vuejs.org/
vue-lazyload 图片懒装载处理组件。
https://github.com/hilongjw/vue-lazyload
axios HTTP通信组件，可以远程存取各种REST-API服务。
https://github.com/axios/axios
vue-typer 内容显示的打字机组件。
https://github.com/cngu/vue-typer
vue-chartjs Chart.js库的vue实现，可以完成网页中的图表显示。
https://vue-chartjs.org/
演示: http://demo.vue-chartjs.org/ vue-fa FontAwesome5库的vue实现，可以调用FontAwesome5的各种组件。
https://cweili.github.io/vue-fa/
vee-validate 基于模板的vue校验框架。
https://baianat.github.io/vee-validate/
vuedraggable 网页对象拖动组件，只需写少量的代码，就可以完成页面对象的拖动排序。
https://github.com/SortableJS/Vue.Draggable
演示: https://sortablejs.github.io/Vue.Draggable/#/simple Vue-Socket.io 对于socket.io库的封装，可以和Vuex状态管理配合使用。
https://github.com/MetinSeylan/Vue-Socket.io
Vue-multiselect 多选框的解决方案，还包括状态管理、下拉框、Ajax、检索框等功能。
https://vue-multiselect.js.org/
vuejs-datepicker vue的日期选择组件。
https://github.com/charliekassel/vuejs-datepicker
vue-md-editor vue的markdown编辑器。
https://github.com/anguer/vue-editor
演示: https://cngu.github.io/vue-typer/ vue-rate-it 五星评价组件，省的自己编写了。
https://craigh411.github.io/vue-rate-it/
演示: https://jsfiddle.net/craig_h_411/992o7cq5/ Vue-good-table vue的表格操作组件，支持列排序、内容过滤、分页等操作。
https://xaksis.github.io/vue-good-table/
Vuex 官方出品的状态管理组件，推荐！
https://vuex.vuejs.org/
Vue Router 官方出品的路由定义组件。
https://router.vuejs.org/
element-ui 基于vue 2.0的组件库，同时支持React和Angular。</description>
    </item>
    
    <item>
      <title>Ruoxiyy</title>
      <link>https://xn213.github.io/hugo-blog/2019/03/ruoxiyy/</link>
      <pubDate>Mon, 25 Mar 2019 10:52:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/03/ruoxiyy/</guid>
      <description>三月拾花酿春, 六月流萤染夏, 十月稻陌拾秋, 腊月丛中吻雪, 一年四季, 四季最好都赠你
喜欢是一朝一夕,
爱是从心动 到 古稀
三月拾花酿春
六月流萤染夏
十月稻陌拾秋
腊月丛中吻雪
&amp;emsp;一年四季
四季最好都赠你
生而为人, 我一直与人为善,
&amp;emsp;你为何咄咄逼人,
&amp;emsp;&amp;emsp;风水轮流转,
你见苍天绕过谁!
天天吧啦你 吧啦你滴 :smirk::smirk:

#那些年错过的校服 - 配音: 你为什么推那小女孩 - 她扒拉我 - 我扒拉你, 我扒拉动你吗? 你也不瞅瞅你多重啊, 扒拉你, 扒拉你
人生路上所有的分离, 都是为了再相聚
:music: 嗯 还是(看)老歌好听
张学友 - 如果这都不算爱

good night^ 愿梦里有阳光
“倾听”是教养，
&amp;emsp;“慎言”则是修养。:sunny:
如果你真的懂我,
&amp;emsp;在我咄咄逼人嘴不饶人的那一刻,
&amp;emsp;&amp;emsp;你就该知道,
我到底有多难过~~~~
不出意外的话, 我们再也不会见到了
逢人不必言深, 孤独本是常态&amp;hellip; #纸短情长
:music: 芒种 &amp;ndash; 赵芳婧

喜欢上做饭 :laugh:
:向日葵::向日葵:
一定要和你同频的人在一起,
&amp;emsp;和比你优秀的人在一起,</description>
    </item>
    
    <item>
      <title>Chrome Extensions</title>
      <link>https://xn213.github.io/hugo-blog/2019/02/chrome-extensions/</link>
      <pubDate>Wed, 13 Feb 2019 20:13:20 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2019/02/chrome-extensions/</guid>
      <description>自用谷歌浏览器插件 - 持续更新
Chrome Extension  vuetools
 web前端助手: 
 FeHelper，Chrome浏览器插件，包含一些前端实用的工具  chrome 跨域问题解决
 Allow-Control-Allow-Origin Allow CORS: Access-Control-Allow-Origin 下载  Vimium: 键盘操作更便捷
 Vimium = Vim + Chromium 超方便的快捷键   画词翻译:
 google应用商店 下载.crx文件  crxMouse Top Gestures
 Clear Cache
 拷贝为 Markdown
 wappalyzer
 JSON Viewer:  The most beautiful and customizable JSON/JSONP highlighter that your eyes have ever seen. It is a Chrome extension for printing JSON and JSONP.</description>
    </item>
    
    <item>
      <title>Fe Interview Czbk</title>
      <link>https://xn213.github.io/hugo-blog/2018/11/fe-interview-czbk/</link>
      <pubDate>Wed, 28 Nov 2018 01:21:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2018/11/fe-interview-czbk/</guid>
      <description>本文是根据多份关于web前端面试试题抽取的企业面试时用到最多的一些试题，仅供参考。
web前端高频面试试题含答案 - 传智播客 怎么去设计一个组件封装？
 组件封装的目的是为了重用，提高开发效率和代码质量
  　2.低耦合，单一职责，可复用性，可维护性
　3.前端组件化设计思路
js 异步加载的方式
 渲染引擎遇到 script 标签会停下来，等到执行完脚本，继续向下渲染
 defer 是“渲染完再执行”，async 是“下载完就执行”，defer 如果有多个脚本，会按照在页面中出现的顺序加载，多个async 脚本不能保证加载顺序
 加载 es6模块的时候设置 type=module，异步加载不会造成阻塞浏览器，页面渲染完再执行，可以同时加上async属性，异步执行脚本（利用顶层的this等于undefined这个语法点，可以侦测当前代码是否在 ES6 模块之中）
  css 动画和 js 动画的差异
 代码复杂度，js 动画代码相对复杂一些
 动画运行时，对动画的控制程度上，js 能够让动画，暂停，取消，终止，css动画不能添加事件
 动画性能看，js 动画多了一个js 解析的过程，性能不如 css 动画好
  XSS 与 CSRF 两种跨站攻击
 xss 跨站脚本攻击，主要是前端层面的，用户在输入层面插入攻击脚本，改变页面的显示，或则窃取网站 cookie，预防方法：不相信用户的所有操作，对用户输入进行一个转义，不允许 js 对 cookie 的读写
 csrf 跨站请求伪造，以你的名义，发送恶意请求，通过 cookie 加参数等形式过滤
 我们没法彻底杜绝攻击，只能提高攻击门槛</description>
    </item>
    
    <item>
      <title>《积极心理学》笔记</title>
      <link>https://xn213.github.io/hugo-blog/2018/07/%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 23 Jul 2018 21:31:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2018/07/%E7%A7%AF%E6%9E%81%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>读书笔记-心理学
1 章：积极情绪与幸福感 积极情绪的扩展-建构模型： - 激活一般的行动倾向 - 扩展即时的思维-行动空间 - 构建个人发展资源：身体、智力、人际、心理资源。 情感-认知-行为循环
情绪的情感性：体验积极情绪和消极情绪的一般倾向是相对稳定的。 情感强度：体验到某种情感的力量或者强度。高情感强度的人容易反应过度
高、低情感强度的人在测量快乐和幸福感时的得分是一样的。 《情绪强度测量》《积极与消极情感清单》
人们不善于预测什么带来幸福。 构成美好生活的六个核心维度： - 自我接纳：即使认识到自身的局限人们也试图对自己感觉良好 - 积极关系：形成并维持一种温暖而信任的人际关系 - 环境控制：控制周围的环境以满足自身的需要和愿望 - 自主性：在更大的社会背景下保持自我决定和个人自主性 - 生活目标：发现个人所为之奋斗的目标的意义 - 个人成长：使自己大多数的潜能得到实现
真实的幸福： - 快乐主义理论:幸福是一种原始的主观体验，幸福的生活就是最大化快乐，最小化痛苦 - 需求满足理论:需求得到满足的状态 - 目标清单理论:追求真正有价值的事物来实现自己的幸福生活
幸福的测量： &amp;ldquo;杜乡微笑&amp;rdquo;：脸颊鼓起，眼角出现皱纹以及嘴巴微翘 生理记录测量：心率；脑区活动 自我报告测量：生活满意度量表
影响因素及其提升： 人口统计学变量与幸福感： - 性别：男女在幸福感上没有明显差异 - 年龄：大多数人会随着年龄增长变得更成熟 - 教育：低收入水平国家受教育水平和幸福感正相关。教育本身的对快乐的影响微乎其微 - 婚姻：婚姻可以使一些人的幸福感出现长期性的增长 - 健康：主观健康感受比可观（实际）的健康状况更重要 - 财富：财富不能保证幸福，但是贫穷一般会带来不幸 - 人格：外向性和神经质能预测人们生活中积极和消极情绪的数量，能很好解释主观幸福感
幸福感的提升： 幸福感=基点+生活情境+意志活动，基点和生活情境不易改变，但是意志活动比较容易改善： - 良好的关系：良好的人际关系对于幸福感的影响超出我们的想象。彼此促进。 建议：1.制定能够与家庭保持亲密接触的生活计划。2.结交几个要好的朋友。3.与熟人合作而非竞争。4.扩大社交圈（多微笑） - 喜爱的工作：工作满意度和幸福感有中上程度的相关性 - 目标与意义：幸福的人更可能有一个明确的人生目标。人的基本动机就是追求卓越。为财富而奋斗的人，幸福感常常偏低 （认识到持久的幸福并不是来自财富上的成功；重视亲密的人际关系；设定目标，努力向前；从事有意义和有成果的工作； 将自己的工作和生活的目标与他人、社会联系起来） - 运动和锻炼：长期的锻炼能让人产生更强的幸福感 - 其他建议：管理好你的时间；关注自我以外的人和事，帮助需要帮助的人；关注当下，投入地生活；表现得快乐；心存感激）</description>
    </item>
    
    <item>
      <title>《拖延心理学》笔记</title>
      <link>https://xn213.github.io/hugo-blog/2018/07/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/</link>
      <pubDate>Mon, 23 Jul 2018 21:21:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2018/07/%E6%8B%96%E5%BB%B6%E5%BF%83%E7%90%86%E5%AD%A6%E7%AC%94%E8%AE%B0/</guid>
      <description>&lt;p&gt;不少人都有拖延的毛病，考试临时抱佛脚，作业放到最后一晚做，项目延期等等。拖延不光是时间管理的问题，也不仅仅是习惯的问题，它涉及到人深层次的内心世界，所以改变起来有一定困难。&lt;/p&gt;

&lt;h1 id=&#34;拖延心理学&#34;&gt;《拖延心理学》&lt;/h1&gt;

&lt;h2 id=&#34;拖延的根源&#34;&gt;拖延的根源&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;拖延的情绪根源涉及内心感受、恐惧、希望、记忆、梦想、怀疑以及压力。但是很多拖延者并不能识别所有这些活跃于表面现象之下的情绪波动，因为他们利用拖延来逃避不舒服的感受。&lt;/li&gt;
&lt;li&gt;拖延的生物根源包括你的身体、大脑以及你的遗传基因。在你大脑中发生的事情，会影响到你会回避什么样的感受，而你所回避的(或者你所没有回避的)，会影响到你大脑的结构和功能。因为这种“神经可塑性”，大脑始终在变化，所以你的生物倾向性并不一定会对你的个人发展构成阻碍。&lt;/li&gt;
&lt;li&gt;拖延的另一个根源，是拖延者与时间的纠葛。拖延者常常以一种“期望式思维”来看待时间，或者他们常常将时间看做一个需要制服和取胜的对手。这种对待时间的态度激发了更多的拖延。&lt;/li&gt;
&lt;li&gt;拖延的人际关系根源，主要指你的家庭背景和社会关系，以及你在当今社会的地位。你在以往的家庭关系中所受到的影响，很可能会在你的生活中延续下去，并可能在维护你的拖延倾向中起到了一定的作用。对自己在社会角色和文化角色上的忧虑或许也是构成你拖延习性的一个因素，要知道，它会影响到你的自我感觉以及人际关系。&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
    <item>
      <title>VSCode Extensions</title>
      <link>https://xn213.github.io/hugo-blog/2018/02/vscode-extensions/</link>
      <pubDate>Thu, 01 Feb 2018 21:52:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2018/02/vscode-extensions/</guid>
      <description>自用 VSCode 插件 - 持续更新
 Settings Sync
编辑器设置同步(到github)，包括插件，配置等。
  Vue 插件  Vetur
目前 VSCode 上面最好用的 Vue 插件。能够实现在 .vue 文件中：
 语法错误检查，包括 CSS/SCSS/LESS/Javascript/TypeScript 语法高亮，包括 html/jade/pug css/sass/scss/less/stylus js/ts emmet 支持 代码自动补全（目前还是初级阶段），包括 HTML/CSS/SCSS/LESS/JavaScript/TypeScript  配合 ESLint 插件食用效果更佳。
 Vue VSCode Snippets
Vue语法片段, 增强您的 Vue 工作流程
 VueHelper
另一款 Vue 语法片段
   Import Cost
引入包大小计算, 对于项目打包后体积掌握很有帮助
  代码格式化  AutoFileName // Auto Close Tag // Auto Rename Tag</description>
    </item>
    
    <item>
      <title>Code Snippets</title>
      <link>https://xn213.github.io/hugo-blog/2017/07/code-snippets/</link>
      <pubDate>Tue, 25 Jul 2017 21:13:32 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2017/07/code-snippets/</guid>
      <description>一些常用的代码块,
JS Snippets // isObject function isObject (obj) { return obj !== null &amp;amp;&amp;amp; typeof obj === &#39;object&#39; } // 判断数据是数字，可能类型是string，但是&#39;123&#39;也算数字 function valueIsNumber(value) { return !isNaN(Number(value)); } //  ↑ Back to Top
如何判断一个对象是否为数组 如果浏览器支持 Array.isArray()可以直接判断, 否则需进行必要判断
/** * 判断一个对象是否是数组，参数不是对象或者不是数组，返回false * * @param {Object} arg 需要测试是否为数组的对象 * @return {Boolean} 传入参数是数组返回true，否则返回false */ function isArray(arg) { if (typeof arg === &#39;object&#39;) { return Object.prototype.toString.call(arg) === &#39;[object Array]&#39;; } return false; }  ↑ Back to Top</description>
    </item>
    
    <item>
      <title>CSS Snippets</title>
      <link>https://xn213.github.io/hugo-blog/2017/07/css-snippets/</link>
      <pubDate>Tue, 25 Jul 2017 21:10:13 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2017/07/css-snippets/</guid>
      <description>一些常用的 CSS 代码块,
CSS Snippets 45个值得收藏的 CSS 形状 /* 像素心: box-shadow */ .pxheart { position: absolute; left: 50%; top: 50%; width: 105px; height: 105px; margin: -52.5px 0 0 -52.5px; } .pxheart::before { content: &#39;&#39;; display: block; transition: all 400ms; width: 15px; height: 15px; margin: -15px 0 0 -15px; box-shadow: 30px 15px #8e1a19, 45px 15px #ac0500, 75px 15px #f73f0c, 90px 15px #fa5f27, 15px 30px #740100, 30px 30px #8e0500, 45px 30px #8e1918, 60px 30px #ca1300, 75px 30px #f34f2b, 90px 30px #df351f, 105px 30px #f77c2a, 15px 45px #4b0000, 30px 45px #690100, 45px 45px #8e0f0b, 60px 45px #bf1000, 75px 45px #f84010, 90px 45px #f04222, 105px 45px #fa5724, 15px 60px #451312, 30px 60px #5a0100, 45px 60px #840e0c, 60px 60px #a51d1a, 75px 60px #ed2805, 90px 60px #d9321e, 105px 60px #f44622, 30px 75px #3b0000, 45px 75px #5d1a1b, 60px 75px #8e1a19, 75px 75px #a80700, 90px 75px #b90a00, 45px 90px #3d0000, 60px 90px #551415, 75px 90px #670100, 60px 105px #340000; animation: pulse 1.</description>
    </item>
    
    <item>
      <title>Js 面试题大搜罗</title>
      <link>https://xn213.github.io/hugo-blog/2017/07/js-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%90%9C%E7%BD%97/</link>
      <pubDate>Tue, 25 Jul 2017 17:50:20 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2017/07/js-%E9%9D%A2%E8%AF%95%E9%A2%98%E5%A4%A7%E6%90%9C%E7%BD%97/</guid>
      <description>js 面试题搜罗, 一些代码段
js 面试题搜罗 ES6 /////////////////////////////// // from page-82 // try-p82-keys var obj ={ a:1, b:2, }; Object.setPrototypeOf(obj,{ c:3, }); console.log(Object.keys(obj)); // [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;] console.log(JSON.stringify(obj)); // {&amp;quot;a&amp;quot;:1,&amp;quot;b&amp;quot;:2} var keys1 =[]; for(let key in obj)keys1.push(key); console.log(keys1); // [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;, &amp;quot;c&amp;quot;] var keys2 =[]; for(let key in Object.assign({},obj))keys2.push(key); console.log(keys2); // [&amp;quot;a&amp;quot;, &amp;quot;b&amp;quot;] ///////////////////////////////  逻辑 /////////////////////////////// // 逻辑 a=1 b=2 不使用第三个变了量交换a,b // var a = 1, b = 2; // // 最牛逼的 // a = [b,b=a][0] // 0使用临时变量 - low // var t = a // a = b // b = t // 1 // a = a + b // b = a - b // a = a - b // 2-1 // a = a^b //a^=b // b = b^a //b^=a // a = a^b //a^=b // 2-2 // a = (b^=a^=b)^a; // 3 // a = {a: b,b: a} // b = a.</description>
    </item>
    
    <item>
      <title>ES6 标准入门</title>
      <link>https://xn213.github.io/hugo-blog/2017/02/es6-%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8/</link>
      <pubDate>Sat, 25 Feb 2017 19:23:20 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2017/02/es6-%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8/</guid>
      <description>一些 ES6 标准
let 和 const 命令 let let 声明的变量只在所在的代码块中有效。 let 不存在变量提升，，一定要先声明后使用（暂时性死区）。 let 实际上为 js 新增了块级作用域，外层作用域无法读取内层作用域的变量。块级作用域的出现使得立即执行表达式不再必要了。 es5 规定函数不能在块级作用域定义，但是 es6 允许在其中声明函数，但应该尽量避免，而是使用函数表达式。
for (let i = 0; i &amp;lt; 10; i++) { // ... } console.log(i) // ReferenceError: i is not defined  const const 声明一个只读变量，一旦声明不可变。作用域和 let 相同
变量的解构赋值 数组解构赋值 按照『模式匹配』从数组和对象中抽取值。
let [a, b, c] = [1,2,3]; let [head, ...tail] = [1,2,3,4] head // 1 tail // [2,3,4] let [x,y, ...z] = [&#39;a&#39;] x // &amp;quot;a&amp;quot; y // undefined, 解构不成功变量的值就是 undefined z // [] // 不完全解构也可以成功。事实上，只要具备 Iterator 接口，都可以用数组形式解构赋值 let [x,y]=[1,2,3] x //1 y //2  function* fibs() { let a=0; let b=1; while (true) { yield a; [a,b] = [b, a+b]; } }  // es6 内部使用严格相等运算符 === let [x=1] = [undefined]; x //1 let [x=1] = [null] x //null，以为 null 不是严格等于 undefined，所以可以被赋值  注意如果默认值是一个表达式，他是惰性求值的。</description>
    </item>
    
    <item>
      <title>Fe Solutions</title>
      <link>https://xn213.github.io/hugo-blog/2017/02/fe-solutions/</link>
      <pubDate>Mon, 13 Feb 2017 21:13:10 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2017/02/fe-solutions/</guid>
      <description>前端遇到的问题及解决方案:
 页面多个音频 audio 只允许播放一个 js 解决方案: (video 同理)
const audios = document.getElementsByTagName(&amp;quot;audio&amp;quot;); // 暂停函数 function pauseAll() { let self = this; [].forEach.call(audios, function (i) { // 将audios中其他的audio全部暂停 i !== self &amp;amp;&amp;amp; i.pause(); }) } // 给play事件绑定暂停函数 [].forEach.call(audios, function (i) { i.addEventListener(&amp;quot;play&amp;quot;, pauseAll.bind(i)); });   ↑ Back to Top
 Vscode 格式化 vue Template 代码段  1、安装 vetur
2、在 User Setting 中增加设置: &amp;quot;vetur.format.defaultFormatter.html&amp;quot;: &amp;quot;js-beautify-html&amp;quot;
3、搞定 : 格式化快捷键：Alt+Shift+F
↑ Back to Top</description>
    </item>
    
    <item>
      <title>移动端页面开发资源总结</title>
      <link>https://xn213.github.io/hugo-blog/2015/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93/</link>
      <pubDate>Fri, 25 Sep 2015 19:16:35 +0800</pubDate>
      
      <guid>https://xn213.github.io/hugo-blog/2015/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%A1%B5%E9%9D%A2%E5%BC%80%E5%8F%91%E8%B5%84%E6%BA%90%E6%80%BB%E7%BB%93/</guid>
      <description>移动端页面开发资源总结及技巧
工作的过程中遇到过很多问题，bug的解决方案，记录下来，以便后用！！！内容并不是很全，以后每遇到一个问题都会总结在这里，分享给大家！
一、meta标签相关知识 1、移动端页面设置视口宽度等于设备宽度，并禁止缩放。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=device-width,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;quot; /&amp;gt;  2、移动端页面设置视口宽度等于定宽（如640px），并禁止缩放，常用于微信浏览器页面。
&amp;lt;meta name=&amp;quot;viewport&amp;quot; content=&amp;quot;width=640,initial-scale=1.0,minimum-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;quot; /&amp;gt;  3、禁止将页面中的数字识别为电话号码
&amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;telephone=no&amp;quot; /&amp;gt;  4、忽略Android平台中对邮箱地址的识别
&amp;lt;meta name=&amp;quot;format-detection&amp;quot; content=&amp;quot;email=no&amp;quot; /&amp;gt;  5、当网站添加到主屏幕快速启动方式，可隐藏地址栏，仅针对ios的safari
&amp;lt;meta name=&amp;quot;apple-mobile-web-app-capable&amp;quot; content=&amp;quot;yes&amp;quot; /&amp;gt; &amp;lt;!-- ios7.0版本以后，safari上已看不到效果 --&amp;gt;  6、将网站添加到主屏幕快速启动方式，仅针对ios的safari顶端状态条的样式
&amp;lt;meta name=&amp;quot;apple-mobile-web-app-status-bar-style&amp;quot; content=&amp;quot;black&amp;quot; /&amp;gt; &amp;lt;!-- 可选default、black、black-translucent --&amp;gt;  viewport 模板 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;quot;utf-8&amp;quot;&amp;gt; &amp;lt;meta content=&amp;quot;width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no&amp;quot; name=&amp;quot;viewport&amp;quot;&amp;gt; &amp;lt;meta content=&amp;quot;yes&amp;quot; name=&amp;quot;apple-mobile-web-app-capable&amp;quot;&amp;gt; &amp;lt;meta content=&amp;quot;black&amp;quot; name=&amp;quot;apple-mobile-web-app-status-bar-style&amp;quot;&amp;gt; &amp;lt;meta content=&amp;quot;telephone=no&amp;quot; name=&amp;quot;format-detection&amp;quot;&amp;gt; &amp;lt;meta content=&amp;quot;email=no&amp;quot; name=&amp;quot;format-detection&amp;quot;&amp;gt; &amp;lt;title&amp;gt;title&amp;lt;/title&amp;gt; &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;index.</description>
    </item>
    
  </channel>
</rss>